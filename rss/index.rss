<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>MisterCh0c</title><description>Software is like underwear. Update it regularly.</description><link>http://localhost:2368/</link><generator>Ghost 0.6</generator><lastBuildDate>Thu, 02 Jul 2015 22:10:46 GMT</lastBuildDate><atom:link href="http://localhost:2368/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>Infosec Institute CTF writeup lvl 1- 6</title><description>&lt;p&gt;&lt;br&gt;  &lt;/p&gt;

&lt;h3 id="level1"&gt;Level 1&lt;/h3&gt;

&lt;p&gt;For this level we are already told that we have to exploit an XSS and pop an alert containing "Ex1". So the basic payload to do that looks like this: &lt;br&gt;
&lt;code&gt;&amp;lt;script&amp;gt;alert('Ex1')&amp;lt;/script&amp;gt;&lt;/code&gt;
&lt;br&gt;We can't just post this because some validation are made&lt;/p&gt;</description><link>http://localhost:2368/infosec-institute/</link><guid isPermaLink="false">c37f177c-9d88-4e73-b7a0-77c3df0d5331</guid><dc:creator>misterch0c</dc:creator><pubDate>Wed, 01 Jul 2015 23:03:37 GMT</pubDate><content:encoded>&lt;p&gt;&lt;br&gt;  &lt;/p&gt;

&lt;h3 id="level1"&gt;Level 1&lt;/h3&gt;

&lt;p&gt;For this level we are already told that we have to exploit an XSS and pop an alert containing "Ex1". So the basic payload to do that looks like this: &lt;br&gt;
&lt;code&gt;&amp;lt;script&amp;gt;alert('Ex1')&amp;lt;/script&amp;gt;&lt;/code&gt;
&lt;br&gt;We can't just post this because some validation are made on both parameters. I choose to attack the url parameter but you could attack the other one it's basically the same thing. &lt;br&gt;
This is the code of the url element:  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;input type="text" placeholder="Name of site" maxsize="10" class="form-control" pattern="[A Za-z]+" required="" name="name"&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So I removed &lt;code&gt;pattern="[A Za-z]&lt;/code&gt; which makes the input only accept uppercase or lowercase characters and also changed the type value from "url" to "text".So now we can post stuff! But still no alert. I took a look at the javascript and noticed this: &lt;br&gt;
&lt;code&gt;var siteName = $(".ex1input[type='text']").val().trim().replace(/&amp;lt;/g,"&amp;amp;lt;").replace(/&amp;gt;/g, "&amp;amp;gt;");&lt;/code&gt;
What it's doing is replacing &amp;lt; and &gt; with their html code, which is not what we want. So there in chrome I just removed the .replace(), hit ctrl+s and voil√†&lt;/p&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2015/07/2015-07-01--1435784382_999x698_scrot.png" alt=""&gt;&lt;/p&gt;

&lt;h2 id="level2"&gt;Level 2&lt;/h2&gt;

&lt;p&gt;The page showed a calculator and we were asked to inject the PHP statement shat shows informations about Apache etc which is basicaly &lt;code&gt;phpinfo();&lt;/code&gt;. I quickly noticed that the two inputs were verified. You could only enter numbers and nothing on the frontend to bypass that. That leaves us with the only other thing can we're sending: the operator. &lt;br&gt;
I modified the operator value like this: &lt;br&gt;
&lt;code&gt;&amp;lt;option value=";phpinfo();"&amp;gt;+&amp;lt;/option&amp;gt;&lt;/code&gt; so basically when you send 1+1 it would translate to valid php code: &lt;code&gt;1;phpinfo();1;&lt;/code&gt;&lt;/p&gt;

&lt;h2 id="level3"&gt;Level 3&lt;/h2&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2015/07/lvl3.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;First thing is to create an account, then after login I could see 'role:normal' which was a hint. So the delimiter is ":" to separate key/value and I guessed that it would have a newline after that. &lt;br&gt;
So my idea was to insert something like &lt;code&gt;someName\nrole:admin&lt;/code&gt;but I couldn't just do this in the form. The easiest way I found to do it is to change the input type to "textarea", that allows you to input a new line and &lt;code&gt;role:admin&lt;/code&gt; in it. Otherwhise you can intercept the request with burpsuite for example and modify it there  &lt;/p&gt;

&lt;h2 id="level4"&gt;Level 4&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;You are confronted with a website that loads some .txt files to display content for its pages. You are thinking that it may be vulnerable. You aim to load a nice file from a remote server and share the link with unsuspecting visitors.
  Your task is to successfully load a PHP file located in the root of infosecinstitute.com. The file should not exist but you must load it without getting errors and it must have the PHP file extension.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The url looked like: &lt;br&gt;
&lt;code&gt;http://ctf.infosecinstitute.com/ctf2/exercises/ex4.php?file=file1.txt&lt;/code&gt;
So from the instruction and the url we can deduce we can use RFI here. And if you read carrefuly the instruction (unlike me at first) you know that the root is &lt;code&gt;infosecinstitute.com&lt;/code&gt; and not &lt;code&gt;../../&lt;/code&gt; of course... &lt;br&gt;
From there we got this error message:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2015/07/2015-07-02--1435871992_256x49_scrot.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;That's right. So somehow the website detected we entered an url. There must some regex behind that. Earlier I did a bit of fuzzing on the file attribute and noted that I got different error message if I used upper or lower case. So this is how I got the flag, bypassing the regex: &lt;br&gt;
&lt;code&gt;http://ctf.infosecinstitute.com/ctf2/exercises/ex4.php?file=hTtp://infosecinstitute.com/file2.txt.php&lt;/code&gt;&lt;/p&gt;

&lt;h2 id="level5"&gt;Level 5&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;It seems you have encountered a page which requires users to login before viewing. Do some magic without having to log in.
  The login button didn't work&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2015/07/2015-07-02--1435873685_632x75_scrot.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;I intercept a request with burpsuite and changed the refer to login.html which I got from the source code. It tricks the browser to think we're coming from the login page&lt;/p&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2015/07/2015-07-02--1435873160_546x342_scrot.png" alt=""&gt;&lt;/p&gt;

&lt;h2 id="level6"&gt;Level 6&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;It seems you have landed on a site that takes HTML tags for article's comments. You want to exploit this by making the users perform an action on the bank.php file in the root of site.com, if they are logged in there. You want users browsers to load that page and execute the query string transferTo with the number 555 as a parameter. Go ahead.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well this was just about reading the instructions. &lt;br&gt;
&lt;code&gt;&amp;lt;img src="http://site.com/bank.php?transferTo=555"&amp;gt;&lt;/code&gt;&lt;/p&gt;</content:encoded></item><item><title>Cracking Sublime Text with Ollydbg</title><description>&lt;p&gt;I've been using Sublime Text 3 (which I purchased) for a while and I was wondering if I could crack it with my basic knowledge. &lt;/p&gt;

&lt;p&gt;My goal here is was to get rid of these:&lt;br&gt; &lt;br&gt;  
&lt;img src="http://localhost:2368/cracking-sublime-text-with-ollydbg/../content/images/2015/03/nags.PNG" alt="" title=""&gt;&lt;br&gt;  
The first window is the about window and the second is the nag screen. The&lt;/p&gt;</description><link>http://localhost:2368/cracking-sublime-text-with-ollydbg/</link><guid isPermaLink="false">603ecfde-5a1f-4c14-9a9f-dc8c59f30069</guid><dc:creator>misterch0c</dc:creator><pubDate>Sun, 22 Mar 2015 11:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I've been using Sublime Text 3 (which I purchased) for a while and I was wondering if I could crack it with my basic knowledge. &lt;/p&gt;

&lt;p&gt;My goal here is was to get rid of these:&lt;br&gt; &lt;br&gt;  
&lt;img src="http://localhost:2368/cracking-sublime-text-with-ollydbg/../content/images/2015/03/nags.PNG" alt="" title=""&gt;&lt;br&gt;  
The first window is the about window and the second is the nag screen. The nag appears if you hit ctrl+s (after a change was made) five times. After that I suppose there is a timer or a character counter because it won't pop for a while. Btw I'm using Sublime Text 3 build 6065 x86 for this demo. Let's get started. Fire Ollydbg and attach the process to it. &lt;br&gt;  
I've tried to search for strings like 'Unregistred' and 'Hello' right away but didn't find any. So I opened the about window, paused the program and hit 'K' to check the call stack. &lt;br&gt; &lt;br&gt;  
&lt;img src="http://localhost:2368/cracking-sublime-text-with-ollydbg/../content/images/2015/03/callstack.PNG" alt="" title=""&gt;&lt;br&gt;  
Now right click on one of the procedures -&gt;  show call. Here we are, now we can look for strings (right click, search for -&gt; all referenced string). I looked for 'Hello' and followed in disassembly. Here is the first badboy:&lt;br&gt; &lt;br&gt;  
&lt;img src="http://localhost:2368/cracking-sublime-text-with-ollydbg/../content/images/2015/03/badboy.PNG" alt="" title=""&gt;&lt;br&gt;  
I looked arround the instructions and at &lt;code&gt;00C537A2&lt;/code&gt; I notided this &lt;code&gt;JNZ 00C53839&lt;/code&gt; the address is pointing to a &lt;code&gt;LEAVE&lt;/code&gt; instruction after the nag screen. So I just changed it for a &lt;code&gt;JMP&lt;/code&gt; so we pass over it&lt;br&gt; &lt;br&gt;  
&lt;img src="http://localhost:2368/cracking-sublime-text-with-ollydbg/../content/images/2015/03/JMP.PNG" alt="" title=""&gt;&lt;br&gt;  
Now the second bad boy. Search for the string "Unregistered" alone and follow in disassembly. From there I put a breakpoint at &lt;code&gt;00C7503A&lt;/code&gt; and followed the execution after I open the about window. I noticed that the &lt;code&gt;JE&lt;/code&gt; at &lt;code&gt;00C7506D&lt;/code&gt; was jumping to the unregistered part. This is because of the &lt;code&gt;CMP&lt;/code&gt; instruction before. The result is true and the Z flag is set to 1 .&lt;br&gt; &lt;br&gt;  
&lt;img src="http://localhost:2368/cracking-sublime-text-with-ollydbg/../content/images/2015/03/cmp.PNG" alt="" title=""&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;So here you can either set the Z flag to 0 by clicking on it, or change 0 to 1 or any value other than 0 in the &lt;code&gt;CMP&lt;/code&gt; instruction to continue to the registered part.&lt;br&gt; &lt;br&gt;  
Voil√† &lt;br&gt;  
&lt;img src="http://localhost:2368/cracking-sublime-text-with-ollydbg/../content/images/2015/03/success.PNG" alt=""&gt;&lt;/p&gt;</content:encoded></item><item><title>Step by step Ghost + Buster blog on Github pages</title><description>&lt;p&gt;This is a step by step for Windows user but it's not much different for other Os's. If you never heard of Ghost well.. You're looking at it. It's a minimalistic CMS and I really like it so far. &lt;br&gt;  
Buster is a static page generator built for Ghost. We need&lt;/p&gt;</description><link>http://localhost:2368/step-by-step-ghost-buster-blog-on-github-pages/</link><guid isPermaLink="false">8592c029-0d2e-4b14-bc85-ef9c56ce2ec5</guid><dc:creator>misterch0c</dc:creator><pubDate>Thu, 19 Feb 2015 11:00:00 GMT</pubDate><content:encoded>&lt;p&gt;This is a step by step for Windows user but it's not much different for other Os's. If you never heard of Ghost well.. You're looking at it. It's a minimalistic CMS and I really like it so far. &lt;br&gt;  
Buster is a static page generator built for Ghost. We need it since you can only host static pages on Github. &lt;br&gt;  
So let's get started. We'll first download/install all the things we'll need:&lt;/p&gt;

&lt;ul&gt;  
&lt;li&gt;&lt;a href="http://nodejs.org/dist/"&gt;Install Nodejs&lt;/a&gt; (version 0.10.x!)&lt;br&gt;&lt;/li&gt;  
&lt;li&gt;&lt;a href="https://www.python.org/downloads/release/python-279/"&gt;Install Python 2.7&lt;/a&gt;&lt;br&gt;&lt;/li&gt;  
&lt;li&gt;&lt;a href="https://ghost.org/download/"&gt;Get Ghost&lt;/a&gt;&lt;/li&gt;  
&lt;/ul&gt;

&lt;p&gt;We need pip to install Buster. Luckily for us Python 2.7 comes with easy install. So open up your terminal and run the following&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;span class="nocode"&gt;cd "c:\Python27\Scripts"
easy_install.exe install pip
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you should be able to&lt;/p&gt;

&lt;pre&gt;&lt;span class="nocode"&gt;pip.exe install buster&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;Note that pip is located to the C:\Python27\Scripts folder. &lt;br&gt;  
At this point you should be able to run the'Node' and 'python' command, if Windows doesn't find it follow the next step. &lt;br&gt;  
It seems like Nodejs installer appends a trailing '/' in the Windows PATH variable and that cause it to fail. So open up control panel -&gt; System -&gt; Advanced Parameters -&gt; Environments Variable then look for the Path variable and click edit. &lt;br&gt;  
You should have this included in your PATH:&lt;/p&gt;

&lt;pre&gt;&lt;span class="nocode"&gt;C:\Program Files (x86)\nodejs;C:\Python27&lt;/span&gt;&lt;/pre&gt;

&lt;h1&gt;Install Ghost &lt;/h1&gt;  

&lt;p&gt;Let's get into the good stuff! Extract Ghost in the folder of your choice. &lt;br&gt;  
Get in there and run  &lt;/p&gt;

&lt;pre&gt;&lt;span class="nocode"&gt;npm install --production
npm start
&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;You can now access your blog locally on localhost:2368 and  localhost:2368/ghost to quickly configurate it. Now that we have Ghost installed locally it's time to generate a static page and push it on Github. &lt;br&gt;  
So firstly go on Github and create a new repository nammed yourUsername.github.io &lt;br&gt;  
Get in the directory where you installed Buster and run the following command. &lt;/p&gt;

&lt;h1&gt;Generate static pages&lt;/h1&gt;  

&lt;pre&gt;&lt;span class="nocode"&gt;buster.exe setup
buster.exe generate --domain 127.0.0.1:2368
buster.exe preview
buster.exe deploy&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;The setup command will ask you for your Github repository url. &lt;br&gt;  
The generate command simply generates static pages for you. Then the preview command will show you a preview of the generated pages and the deploy command will push everything on Github. &lt;br&gt;  
If you're using Cygwin forget about it it won't work. Also I got an issue with the buster executable but it also comes with a python script so use that instead if you have issues.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/step-by-step-ghost-buster-blog-on-github-pages/../content/images/2015/02/buster-pg.PNG" alt=""&gt;&lt;/p&gt;

&lt;p&gt;On random notes for this blog I forked a theme called "The Shell", link to the orignal one is on the footer or you can check &lt;a href="https://github.com/misterch0c/The-Shell"&gt;my fork on github&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title>[GITS-CTF2015] Aart - web writeup</title><description>&lt;p&gt;&lt;/p&gt;&lt;p&gt;[This is a repost from my old dead blog, it was originaly posted on january 18th 2015]&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://2015.ghostintheshellcode.com/"&gt;Ghost in the Shellcode CTF&lt;/a&gt; is now over but the website is still up and you can still complete challenges if you like (update: well not anymore..) &lt;br&gt;  
This is my little write&lt;/p&gt;</description><link>http://localhost:2368/gits-ctf2015-aart-web-writeup/</link><guid isPermaLink="false">8dc07ac9-5b88-4a47-b189-f7e8c47065da</guid><dc:creator>misterch0c</dc:creator><pubDate>Fri, 13 Feb 2015 11:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;/p&gt;&lt;p&gt;[This is a repost from my old dead blog, it was originaly posted on january 18th 2015]&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://2015.ghostintheshellcode.com/"&gt;Ghost in the Shellcode CTF&lt;/a&gt; is now over but the website is still up and you can still complete challenges if you like (update: well not anymore..) &lt;br&gt;  
This is my little write up and the web challenge called "Aart". Here's how it looks when you go to the server for the firsttime&lt;br&gt;  
&lt;br&gt; &lt;br&gt;  
&lt;img src="http://localhost:2368/gits-ctf2015-aart-web-writeup/../content/images/2015/02/aart.PNG" alt=""&gt;  
&lt;br&gt; &lt;br&gt;  
On the register page there was a "Source code" link so I downloaded the code and took a look at it. I noticed 2 interesting things &lt;br&gt;  
Firstly the 2 SQL requests that are made when a user register &lt;br&gt;  
&lt;br&gt; &lt;br&gt;  
&lt;img src="http://localhost:2368/gits-ctf2015-aart-web-writeup/../content/images/2015/02/sqlaart.PNG" alt=""&gt;  
&lt;br&gt; &lt;br&gt;  
Then in this portion of code you can actually see that if isRestricted is true then your account is restricted and otherwise you can get the key.&lt;/p&gt;  

&lt;p&gt;&lt;br&gt; &lt;br&gt;  
&lt;img src="http://localhost:2368/gits-ctf2015-aart-web-writeup/../content/images/2015/02/iddd.PNG" alt=""&gt;  
&lt;br&gt; &lt;br&gt;  
If you still didn't get it we're just going to register/login a bunch of usernames and wait for the key (: &lt;br&gt;  
It's a timing thing. At some point the first INSERT TO will be called twice before the second one has even been called once. This will give us a user with no restricted flag. &lt;br&gt;  
&lt;br&gt;  &lt;/p&gt;

&lt;pre&gt;
for i in {1..50};
do     
curl --data "username=i$i&amp;password=i" http://aart.2015.ghostintheshellcode.com/register.php -s &gt;&amp;1 &gt;/dev/null &amp;     
curl --data "username=i$i&amp;password=i" http://aart.2015.ghostintheshellcode.com/login.php;
done&lt;/pre&gt;

&lt;p&gt;&lt;br&gt; &lt;br&gt;  
So this script is going to create accounts from 'i1' to 'i50' with the password 'i'. At some point we stumble on an unrestricted account &lt;br&gt;  
&lt;br&gt; &lt;br&gt;  
&lt;img src="http://localhost:2368/gits-ctf2015-aart-web-writeup/../content/images/2015/02/success.PNG" alt=""&gt;  
&lt;br&gt; &lt;br&gt;  
Here we go. "this is a key" was actually the key here (;&lt;/p&gt;</content:encoded></item><item><title>Defuse the tar bomb</title><description>&lt;p&gt;Just some shell script that could have saved the world&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function extract()
    {
    if [ -z "$1" ]; then
        echo "Usage: extract [FILE]"
    else
        if [ -f "$1" ]; then
          case "$1" in
            *.7z) 7z x "$1" ;;
            *.bz2) bunzip2 "$1" ;;
            *.exe) cabextract "$1" ;;
            *.gz) gunzip "$1" ;;
            *.lzma) unlzma "$1" ;;
            *.rar) unrar x -ad "$1" ;;
            *.tar.&lt;/code&gt;&lt;/pre&gt;</description><link>http://localhost:2368/defuse-the-tar-bomb/</link><guid isPermaLink="false">88d05166-c540-4a43-afd6-d1f9108805b2</guid><dc:creator>misterch0c</dc:creator><pubDate>Fri, 13 Feb 2015 11:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Just some shell script that could have saved the world&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function extract()
    {
    if [ -z "$1" ]; then
        echo "Usage: extract [FILE]"
    else
        if [ -f "$1" ]; then
          case "$1" in
            *.7z) 7z x "$1" ;;
            *.bz2) bunzip2 "$1" ;;
            *.exe) cabextract "$1" ;;
            *.gz) gunzip "$1" ;;
            *.lzma) unlzma "$1" ;;
            *.rar) unrar x -ad "$1" ;;
            *.tar.bz2) tar xvjf "$1" ;;
            *.tar.gz) tar xvzf "$1" ;;
            *.tar) tar xvf "$1" ;;
            *.tar.xz) tar xvJf "$1" ;;
            *.tbz2) tar xvjf "$1" ;;
            *.tgz) tar xvzf "$1" ;;
            *.xz) unxz "$1" ;;
            *.zip) unzip "$1" ;;
            *.Z) uncompress "$1" ;;
            *) echo "extract: '$1' - unknown archive method" ;;
        esac
     else
            echo "'$1' - file does not exist"
     fi
    fi
    }
&lt;/code&gt;&lt;/pre&gt;</content:encoded></item></channel></rss>